{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"bignumber.js\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","apply","toConsumableArray_default","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","hash","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","self","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","_ref","abi","inputs","_abi$index","padLeft","padding","amount","isNotNullOrUndefined","val","sleep","_sleep","asyncToGenerator_default","regenerator_default","mark","_callee","millis","_args","wrap","_context","prev","next","undefined","abrupt","setTimeout","stop","src_utils","objectSpread_default","code","accounts","crypto","providers","HttpProvider","host","timeout","user","headers","statusPage","classCallCheck_default","instance","axios","baseURL","auth","request","then","payload","method","keys","params","Validator","tronWeb","param","msg","callback","Function","normalized","no","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","gt","lt","gte","lte","se","optional","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","to","from","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","console","log","applyForSR","votes","voterAddress","vote","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","_options$abi","_options$bytecode","bytecode","_options$parameters","parameters","_options$name","_unused","entrys","payable","some","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","typeof_default","splice","_triggerSmartContract","_isConstant","triggerSmartContract","contractAddress","functionSelector","_Object$assign","assign","_parameters$i","function_selector","ownerAddress","clearABI","trx","cache","contracts","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","fullnodeSatisfies","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","_options","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","getTransactionFromBlock","_ref2$transactions","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","confirmed","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","t0","account","_ref5","getAccount","getAccountById","getAccountInfoById","getBalance","_ref6","_ref6$balance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","_ref7","_ref7$balance","_ref8","_ref8$freeNetUsed","freeNetUsed","_ref8$freeNetLimit","freeNetLimit","_ref8$NetUsed","NetUsed","_ref8$NetLimit","NetLimit","getBandwidth","_ref9","_ref9$assetIssue","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","_this3","listNodes","_ref10","_ref10$nodes","nodes","_ref11","_ref11$address","port","start","end","startNum","endNum","_ref12","_ref12$block","getBlockRange","listSuperRepresentatives","_ref13","_ref13$witnesses","witnesses","_this4","_ref15","_ref15$assetIssue","_ref14","_ref14$assetIssue","listTokens","timeUntilNextVoteCycle","_ref16","_ref16$num","Math","floor","_this5","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","_context3","fromPrivateKey","t1","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","_context4","getApprovedList","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context7","_context8","_context9","_context10","_context11","proposal","getProposal","listProposals","_ref17","_ref17$proposals","proposals","getChainParameters","_ref18","_ref18$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref19","_ref19$exchanges","exchanges","_ref20","_ref20$exchanges","getNodeInfo","info","_this6","getTokenListByName","_this7","getTokenByID","messageBytes","messageDigest","recovered","tronAddress","fromHex","signingKey","signDigest","getFunctionSelector","getParamTypes","decodeOutput","filter","_ref3","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","msg2","chunk","broadcast","error","checkResult","_callee2","decoded","_args2","_context2","getTransactionInfo","sent","resMessage","rawResponse","contractResult","eventServer","listener","lastBlock","since","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","priorEvent","bindListener","clearInterval","setInterval","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","pluginInterface","requires","components","plugged","skipped","plugin","semver","satisfies","version","component","Event","healthcheck","isValidProvider","isConnected","sinceTimestamp","size","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","querystring","response","getEventsByTransactionID","DEFAULT_VERSION","possibleConstructorReturn_default","getPrototypeOf_default","fullHost","assertThisInitialized_default","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","_this$event","setServer","currentProviders","_this$event2","_this$event3","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return self.tronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        console.log(toHex(address), utils.isObject(url))\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n        console.log(toHex(address))\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || 1_000_000_000;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if (typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if (parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for (let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: 1_000_000_000\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'function selector',\n                type: 'not-empty-string',\n                value: functionSelector\n            }\n        ], callback))\n            return;\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if (parameters.length) {\n            const abiCoder = new AbiCoder();\n            let types = [];\n            const values = [];\n\n            for (let i = 0; i < parameters.length; i++) {\n                let {type, value} = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                // workaround for unsupported trcToken type\n                types = types.map(type => {\n                    if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n                    return type\n                })\n\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress),\n            function_selector: functionSelector,\n            parameter: parameters\n        };\n\n        if (!options._isConstant) {\n            args.call_value = parseInt(callValue)\n            args.fee_limit = parseInt(feeLimit)\n            if (utils.isNotNullOrUndefined(tokenValue))\n                args.call_token_value = parseInt(tokenValue)\n            if (utils.isNotNullOrUndefined(tokenId))\n                args.token_id = parseInt(tokenId)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request(`wallet/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision <= 0 || precision > 6))\n            return callback('precision must be a positive integer > 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (this.tronWeb.fullnodeSatisfies('>=3.5.0') && !(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if (err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number'){\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/,'');\n        signature = signature.replace(/^0x/,'');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/,'');\n        const signingKey = new SigningKey(privateKey);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            plugged: [],\n            skipped: []\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            for (let component in pluginInterface.components) {\n                if (!this.tronWeb.hasOwnProperty(component)) {\n                    // TODO implement new sub-classes\n                    continue\n                }\n                let methods = pluginInterface.components[component]\n                let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                for (let method in methods) {\n                    if (method === 'constructor' || (this.tronWeb[component][method] &&\n                        (pluginNoOverride.includes(method) // blacklisted methods\n                            || /^_/.test(method)) // private methods\n                    )) {\n                        result.skipped.push(method)\n                        continue\n                    }\n                    this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                    result.plugged.push(method)\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n        \n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport {version} from '../package.json';\nimport semver from 'semver';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport {keccak256} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n                // for retro-compatibility:\n                solidityNode = false, eventServer = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', {hex, base58});\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if (!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}