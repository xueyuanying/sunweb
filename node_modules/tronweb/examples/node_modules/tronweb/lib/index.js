'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _help = require('./utils/help');

var _private = require('./private');

var _account = require('./utils/account');

var _crypto = require('./utils/crypto');

var _ethers = require('ethers');

var _bignumber = require('bignumber.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TronWeb = function () {
    function TronWeb(apiUrl, tronInfuraUrl) {
        _classCallCheck(this, TronWeb);

        this.apiUrl = apiUrl;
        this.defaultAccount = '';
        this.defaultPk = '';
        this.tronInfuraUrl = tronInfuraUrl;
        //xhr.defaults.baseURL = this.apiUrl;
    }

    TronWeb.prototype.toHex = function toHex(str) {
        //address
        if (str.length == 34 && str.indexOf('T') == 0) {
            return (0, _help.address2HexString)(str);
        }
        return (0, _help.stringUtf8toHex)(str);
    };

    TronWeb.prototype.fromHex = function fromHex(sHex) {
        if (sHex.length == 42 && sHex.indexOf('41') == 0) {
            return (0, _help.hexString2Address)(sHex);
        }
        return (0, _help.hexString2Utf8)(sHex);
    };

    TronWeb.prototype.setFullNodeServer = function setFullNodeServer(value) {
        this.apiUrl = value;
    };

    TronWeb.prototype.setEventServer = function setEventServer() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http://52.44.75.99:18889';

        this.tronInfuraUrl = value;
    };

    /**
     * get address from pk
     * @param {string} pk
     * @return {string} address
     * */


    TronWeb.prototype.login = function login(pk) {
        return (0, _crypto.pkToAddress)(pk);
    };

    /**
     * Obtain account balance
     * @param {string} address
     * @return {object}
     **/


    TronWeb.prototype.getBalance = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(address) {
            var _ref2, data;

            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getaccount', {
                                address: (0, _help.address2HexString)(address)
                            });

                        case 2:
                            _ref2 = _context.sent;
                            data = _ref2.data;
                            return _context.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function getBalance(_x2) {
            return _ref.apply(this, arguments);
        }

        return getBalance;
    }();

    /**
     * Query the latest block
     * @param null
     * @return {object}
     * */


    TronWeb.prototype.blockNumber = function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var _ref4, data;

            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getnowblock');

                        case 2:
                            _ref4 = _context2.sent;
                            data = _ref4.data;
                            return _context2.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function blockNumber() {
            return _ref3.apply(this, arguments);
        }

        return blockNumber;
    }();

    /**
     * Query the block by hashString or blockNumber
     * parms {string or number} 
     * @return {object}
     */


    TronWeb.prototype.getBlock = function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3(hashStringOrBlockNumber) {
            var data;
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            data = void 0;

                            if (!isNaN(hashStringOrBlockNumber)) {
                                _context3.next = 7;
                                break;
                            }

                            _context3.next = 4;
                            return _axios2.default.post(this.apiUrl + '/wallet/getblockbyid', { value: hashStringOrBlockNumber });

                        case 4:
                            data = _context3.sent;
                            _context3.next = 11;
                            break;

                        case 7:
                            hashStringOrBlockNumber = typeof hashStringOrBlockNumber === 'number' ? hashStringOrBlockNumber : parseInt(hashStringOrBlockNumber);
                            _context3.next = 10;
                            return _axios2.default.post(this.apiUrl + '/wallet/getblockbynum', { num: hashStringOrBlockNumber });

                        case 10:
                            data = _context3.sent;

                        case 11:
                            return _context3.abrupt('return', data.data);

                        case 12:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function getBlock(_x3) {
            return _ref5.apply(this, arguments);
        }

        return getBlock;
    }();

    /**
     * Query the count of transaction in a block by hashString or blockNumber
     * params {string or number} 
     * @return {object}
     */


    TronWeb.prototype.getBlockTransactionCount = function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4(hashStringOrBlockNumber) {
            var _ref7, data;

            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            _context4.next = 2;
                            return this.getBlock(hashStringOrBlockNumber);

                        case 2:
                            _ref7 = _context4.sent;
                            data = _ref7.data;
                            return _context4.abrupt('return', { count: data.transactions ? data.transactions.length : 0 });

                        case 5:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this);
        }));

        function getBlockTransactionCount(_x4) {
            return _ref6.apply(this, arguments);
        }

        return getBlockTransactionCount;
    }();

    /**
     * Query a transactional information by hash string of txId 
     * params {string or number} 
     * @return {object}
     */


    TronWeb.prototype.getTransaction = function () {
        var _ref8 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee5(id) {
            var _ref9, data;

            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/gettransactionbyid', { value: id });

                        case 2:
                            _ref9 = _context5.sent;
                            data = _ref9.data;
                            return _context5.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function getTransaction(_x5) {
            return _ref8.apply(this, arguments);
        }

        return getTransaction;
    }();
    /**
     * Total all transactions
     * @param null
     * @returns {object} {num:11111}
     * */


    TronWeb.prototype.getTransactionCount = function () {
        var _ref10 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
            var _ref11, data;

            return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            _context6.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/totaltransaction');

                        case 2:
                            _ref11 = _context6.sent;
                            data = _ref11.data;
                            return _context6.abrupt('return', data.num);

                        case 5:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, this);
        }));

        function getTransactionCount() {
            return _ref10.apply(this, arguments);
        }

        return getTransactionCount;
    }();
    /**
     * A transaction that sends a transfer
     * @param {string} from ,{string} to ,{int} amount,
     * @return {object} transaction
     * */


    TronWeb.prototype.sendTransaction = function () {
        var _ref12 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee7(from, to, amount, privateKey) {
            var transaction, signTransaction, res;
            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            _context7.prev = 0;

                            if (privateKey) {
                                _context7.next = 3;
                                break;
                            }

                            throw "please input privateKey！";

                        case 3:
                            _context7.next = 5;
                            return this.createTransaction(to, from, amount);

                        case 5:
                            transaction = _context7.sent;
                            _context7.next = 8;
                            return this.signTransaction(transaction, privateKey, 0);

                        case 8:
                            signTransaction = _context7.sent;
                            _context7.next = 11;
                            return this.sendRawTransaction(signTransaction);

                        case 11:
                            res = _context7.sent;
                            return _context7.abrupt('return', Object.assign(res, signTransaction));

                        case 15:
                            _context7.prev = 15;
                            _context7.t0 = _context7['catch'](0);

                            console.error(_context7.t0);

                        case 18:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, this, [[0, 15]]);
        }));

        function sendTransaction(_x6, _x7, _x8, _x9) {
            return _ref12.apply(this, arguments);
        }

        return sendTransaction;
    }();

    /**
     * Create a transfer transaction,If the to address for the transfer does not exist, create the account on the blockchain  
     * @param {string} to_address,{string} owner_address,{int} amount
     * @return {object} transaction
     * */


    TronWeb.prototype.createTransaction = function () {
        var _ref13 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee8(to_address, owner_address, amount) {
            var _ref14, data;

            return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            _context8.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/createtransaction', {
                                to_address: (0, _help.address2HexString)(to_address),
                                owner_address: (0, _help.address2HexString)(owner_address),
                                amount: amount
                            });

                        case 2:
                            _ref14 = _context8.sent;
                            data = _ref14.data;
                            return _context8.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, this);
        }));

        function createTransaction(_x10, _x11, _x12) {
            return _ref13.apply(this, arguments);
        }

        return createTransaction;
    }();
    /**
     * Sign a transaction，this api maybe leak the private key,so apply this api in a safe environment please.
     * @param {object} transaction，{string} privateKey,{int} teriminal 0: client, 1: service
     * @return {object} transaction
     *
     * */

    TronWeb.prototype.signTransaction = function () {
        var _ref15 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee9(transaction, privateKey) {
            var teriminal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var _ref16, data;

            return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            if (!(teriminal == 0)) {
                                _context9.next = 4;
                                break;
                            }

                            return _context9.abrupt('return', (0, _crypto.signTransaction)(privateKey, transaction));

                        case 4:
                            _context9.next = 6;
                            return _axios2.default.post(this.apiUrl + '/wallet/gettransactionsign', {
                                transaction: transaction,
                                privateKey: privateKey
                            });

                        case 6:
                            _ref16 = _context9.sent;
                            data = _ref16.data;
                            return _context9.abrupt('return', data);

                        case 9:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, this);
        }));

        function signTransaction(_x13, _x14) {
            return _ref15.apply(this, arguments);
        }

        return signTransaction;
    }();
    /**
     * Broadcast signed transactions。
     * @param {object} signTransaction
     * @return {object} {result:true}
     * */


    TronWeb.prototype.sendRawTransaction = function () {
        var _ref17 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee10(signTransaction) {
            var _ref18, data;

            return _regenerator2.default.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            _context10.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/broadcasttransaction', signTransaction);

                        case 2:
                            _ref18 = _context10.sent;
                            data = _ref18.data;
                            return _context10.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, this);
        }));

        function sendRawTransaction(_x16) {
            return _ref17.apply(this, arguments);
        }

        return sendRawTransaction;
    }();
    /**
     * Change the account name (only once)
     * @param {string} account_name,{string} owner_address
     * @return {object}
     * */


    TronWeb.prototype.updateAccount = function () {
        var _ref19 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee11(account_name, owner_address) {
            var _ref20, data;

            return _regenerator2.default.wrap(function _callee11$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            _context11.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/updateaccount', {
                                account_name: (0, _help.stringUtf8toHex)(account_name),
                                owner_address: (0, _help.address2HexString)(owner_address)
                            });

                        case 2:
                            _ref20 = _context11.sent;
                            data = _ref20.data;
                            return _context11.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context11.stop();
                    }
                }
            }, _callee11, this);
        }));

        function updateAccount(_x17, _x18) {
            return _ref19.apply(this, arguments);
        }

        return updateAccount;
    }();
    /**
     * Vote on superdelegates
     * @param {string} owner_address, {object} votes example:
     * [{"vote_address": "41e552f6487585c2b58bc2c9bb4492bc1f17132cd0", "vote_count": 5}]
     *
     * */


    TronWeb.prototype.voteWitnessAccount = function () {
        var _ref21 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee12(owner_address, votes) {
            var newVotes, _ref22, data;

            return _regenerator2.default.wrap(function _callee12$(_context12) {
                while (1) {
                    switch (_context12.prev = _context12.next) {
                        case 0:
                            newVotes = votes.map(function (item) {
                                return {
                                    vote_count: item.vote_count,
                                    vote_address: (0, _help.address2HexString)(item.vote_address)
                                };
                            });
                            _context12.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/votewitnessaccount', {
                                owner_address: (0, _help.address2HexString)(owner_address),
                                votes: newVotes
                            });

                        case 3:
                            _ref22 = _context12.sent;
                            data = _ref22.data;
                            return _context12.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context12.stop();
                    }
                }
            }, _callee12, this);
        }));

        function voteWitnessAccount(_x19, _x20) {
            return _ref21.apply(this, arguments);
        }

        return voteWitnessAccount;
    }();

    /**
     * Publish the Token
     * @param {object} oToken: {
        "owner_address":"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0",
        "name":"0x6173736574497373756531353330383934333132313538",
        "abbr": "0x6162627231353330383934333132313538",
        "total_supply" :4321,
        "trx_num":1,
        "num":1,
        "start_time" : 1530894315158,
        "end_time":1533894312158,
        "description":"007570646174654e616d6531353330363038383733343633",
        "url":"007570646174654e616d6531353330363038383733343633",
        "free_asset_net_limit":10000,
        "public_free_asset_net_limit":10000,
        "frozen_supply":{"frozen_amount":1, "frozen_days":2}
        }
     *
     * */


    TronWeb.prototype.createToken = function () {
        var _ref23 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee13(oToken) {
            var owner_address, name, abbr, total_supply, trx_num, num, start_time, end_time, description, url, free_asset_net_limit, public_free_asset_net_limit, frozen_supply, _ref24, data;

            return _regenerator2.default.wrap(function _callee13$(_context13) {
                while (1) {
                    switch (_context13.prev = _context13.next) {
                        case 0:
                            owner_address = oToken.owner_address, name = oToken.name, abbr = oToken.abbr, total_supply = oToken.total_supply, trx_num = oToken.trx_num, num = oToken.num, start_time = oToken.start_time, end_time = oToken.end_time, description = oToken.description, url = oToken.url, free_asset_net_limit = oToken.free_asset_net_limit, public_free_asset_net_limit = oToken.public_free_asset_net_limit, frozen_supply = oToken.frozen_supply;

                            owner_address = (0, _help.address2HexString)(owner_address);
                            name = (0, _help.stringUtf8toHex)(name);
                            abbr = (0, _help.stringUtf8toHex)(abbr);
                            description = (0, _help.stringUtf8toHex)(description);
                            url = (0, _help.stringUtf8toHex)(url);
                            _context13.next = 8;
                            return _axios2.default.post(this.apiUrl + '/createassetissue', {
                                owner_address: owner_address,
                                name: name,
                                abbr: abbr,
                                total_supply: total_supply,
                                trx_num: trx_num,
                                num: num,
                                start_time: start_time,
                                end_time: end_time,
                                description: description,
                                url: url,
                                free_asset_net_limit: free_asset_net_limit,
                                public_free_asset_net_limit: public_free_asset_net_limit,
                                frozen_supply: frozen_supply
                            });

                        case 8:
                            _ref24 = _context13.sent;
                            data = _ref24.data;
                            return _context13.abrupt('return', data);

                        case 11:
                        case 'end':
                            return _context13.stop();
                    }
                }
            }, _callee13, this);
        }));

        function createToken(_x21) {
            return _ref23.apply(this, arguments);
        }

        return createToken;
    }();

    /**
     * Create account
     * @param {string} owner_address,{string} account_address
     * */


    TronWeb.prototype.createAccount = function () {
        var _ref25 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee14(owner_address, account_address) {
            var _ref26, data;

            return _regenerator2.default.wrap(function _callee14$(_context14) {
                while (1) {
                    switch (_context14.prev = _context14.next) {
                        case 0:
                            _context14.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/createaccount', {
                                owner_address: (0, _help.address2HexString)(owner_address),
                                account_address: (0, _help.address2HexString)(account_address)
                            });

                        case 2:
                            _ref26 = _context14.sent;
                            data = _ref26.data;
                            return _context14.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context14.stop();
                    }
                }
            }, _callee14, this);
        }));

        function createAccount(_x22, _x23) {
            return _ref25.apply(this, arguments);
        }

        return createAccount;
    }();

    /**
     * Apply to be a super delegate
     * @param {string} owner_address,{string} url
     * @return {object} transaction
     * */


    TronWeb.prototype.createWitness = function () {
        var _ref27 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee15(owner_address, url) {
            var _ref28, data;

            return _regenerator2.default.wrap(function _callee15$(_context15) {
                while (1) {
                    switch (_context15.prev = _context15.next) {
                        case 0:
                            _context15.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/createwitness', {
                                owner_address: (0, _help.address2HexString)(owner_address),
                                url: (0, _help.stringUtf8toHex)(url)
                            });

                        case 2:
                            _ref28 = _context15.sent;
                            data = _ref28.data;
                            return _context15.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context15.stop();
                    }
                }
            }, _callee15, this);
        }));

        function createWitness(_x24, _x25) {
            return _ref27.apply(this, arguments);
        }

        return createWitness;
    }();
    /**Transfer the Token
     * @param {object} options {{"owner_address":"Txxxxxxx...", "to_address": "Txxxxxxx...", "asset_name": "a token", "amount": 100}}
     * @return {object} transaction
     *
     * */


    TronWeb.prototype.transferAsset = function () {
        var _ref29 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee16(options) {
            var owner_address, to_address, asset_name, amount, _ref30, data;

            return _regenerator2.default.wrap(function _callee16$(_context16) {
                while (1) {
                    switch (_context16.prev = _context16.next) {
                        case 0:
                            owner_address = options.owner_address, to_address = options.to_address, asset_name = options.asset_name, amount = options.amount;

                            owner_address = (0, _help.address2HexString)(owner_address);
                            to_address = (0, _help.address2HexString)(to_address);
                            asset_name = (0, _help.stringUtf8toHex)(asset_name);

                            _context16.next = 6;
                            return _axios2.default.post(this.apiUrl + '/wallet/transferasset', {
                                owner_address: owner_address, to_address: to_address, asset_name: asset_name, amount: amount
                            });

                        case 6:
                            _ref30 = _context16.sent;
                            data = _ref30.data;
                            return _context16.abrupt('return', data);

                        case 9:
                        case 'end':
                            return _context16.stop();
                    }
                }
            }, _callee16, this);
        }));

        function transferAsset(_x26) {
            return _ref29.apply(this, arguments);
        }

        return transferAsset;
    }();
    /**
     * Quick transfer,this api maybe leak the private key,so call this api in a safe environment please.(before call this api,please call createAddress api to generate the address)
     * @param {string} passPhrase,{string} toAddress, {int} amount
     * @return {object}
     * */


    TronWeb.prototype.easytransfer = function () {
        var _ref31 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee17(passPhrase, toAddress, amount) {
            var _ref32, data;

            return _regenerator2.default.wrap(function _callee17$(_context17) {
                while (1) {
                    switch (_context17.prev = _context17.next) {
                        case 0:
                            _context17.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/easytransfer', {
                                passPhrase: (0, _help.stringUtf8toHex)(passPhrase),
                                toAddress: (0, _help.address2HexString)(toAddress),
                                amount: amount
                            });

                        case 2:
                            _ref32 = _context17.sent;
                            data = _ref32.data;
                            return _context17.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context17.stop();
                    }
                }
            }, _callee17, this);
        }));

        function easytransfer(_x27, _x28, _x29) {
            return _ref31.apply(this, arguments);
        }

        return easytransfer;
    }();

    /**
     * Create an address with a password,this api maybe leak the password,so call this api in a safe environment please.
     * @param {string} password
     * @return {object}
     * */


    TronWeb.prototype.createAddress = function () {
        var _ref33 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee18(password) {
            var _ref34, data;

            return _regenerator2.default.wrap(function _callee18$(_context18) {
                while (1) {
                    switch (_context18.prev = _context18.next) {
                        case 0:
                            _context18.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/createaddress', {
                                value: (0, _help.stringUtf8toHex)(password)
                            });

                        case 2:
                            _ref34 = _context18.sent;
                            data = _ref34.data;
                            return _context18.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context18.stop();
                    }
                }
            }, _callee18, this);
        }));

        function createAddress(_x30) {
            return _ref33.apply(this, arguments);
        }

        return createAddress;
    }();

    /**
     * Participate in token issuance
     * @param {object} {
                "to_address": "41e552f6487585c2b58bc2c9bb4492bc1f17132cd0",
                "owner_address":"41e472f387585c2b58bc2c9bb4492bc1f17342cd1",
                "amount":100,
                "asset_name":"3230313271756265696a696e67"
               }
     * @return {object} transaction
     * */


    TronWeb.prototype.participateAssetIssue = function () {
        var _ref35 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee19(options) {
            var to_address, owner_address, amount, asset_name, _ref36, data;

            return _regenerator2.default.wrap(function _callee19$(_context19) {
                while (1) {
                    switch (_context19.prev = _context19.next) {
                        case 0:
                            to_address = options.to_address, owner_address = options.owner_address, amount = options.amount, asset_name = options.asset_name;

                            to_address = (0, _help.address2HexString)(to_address);
                            owner_address = (0, _help.address2HexString)(owner_address);
                            asset_name = (0, _help.stringUtf8toHex)(asset_name);

                            _context19.next = 6;
                            return _axios2.default.post(this.apiUrl + '/wallet/participateassetissue', {
                                to_address: to_address,
                                owner_address: owner_address,
                                amount: amount,
                                asset_name: asset_name
                            });

                        case 6:
                            _ref36 = _context19.sent;
                            data = _ref36.data;
                            return _context19.abrupt('return', data);

                        case 9:
                        case 'end':
                            return _context19.stop();
                    }
                }
            }, _callee19, this);
        }));

        function participateAssetIssue(_x31) {
            return _ref35.apply(this, arguments);
        }

        return participateAssetIssue;
    }();
    /**
     * Freeze TRX, gain bandwidth, gain voting rights
     * @param {string} owner_address,{float} frozen_balance,{int} frozen_duration
     * @return {object} transaction
     * */


    TronWeb.prototype.freezeBalance = function () {
        var _ref37 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee20(owner_address, frozen_balance, frozen_duration) {
            var _ref38, data;

            return _regenerator2.default.wrap(function _callee20$(_context20) {
                while (1) {
                    switch (_context20.prev = _context20.next) {
                        case 0:
                            owner_address = (0, _help.address2HexString)(owner_address);
                            _context20.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/freezebalance', {
                                owner_address: owner_address,
                                frozen_balance: frozen_balance,
                                frozen_duration: frozen_duration
                            });

                        case 3:
                            _ref38 = _context20.sent;
                            data = _ref38.data;
                            return _context20.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context20.stop();
                    }
                }
            }, _callee20, this);
        }));

        function freezeBalance(_x32, _x33, _x34) {
            return _ref37.apply(this, arguments);
        }

        return freezeBalance;
    }();

    /**
     * The thawing of TRX that has ended the freeze will also lose the bandwidth and voting power that this part of TRX brings
     * @param {string} owner_address
     * @return {object} transaction
     * */


    TronWeb.prototype.unfreezeBalance = function () {
        var _ref39 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee21(owner_address) {
            var _xhr$post, data;

            return _regenerator2.default.wrap(function _callee21$(_context21) {
                while (1) {
                    switch (_context21.prev = _context21.next) {
                        case 0:
                            owner_address = (0, _help.address2HexString)(owner_address);
                            _xhr$post = _axios2.default.post(this.apiUrl + '/wallet/unfreezebalance', {
                                owner_address: owner_address
                            }), data = _xhr$post.data;
                            return _context21.abrupt('return', data);

                        case 3:
                        case 'end':
                            return _context21.stop();
                    }
                }
            }, _callee21, this);
        }));

        function unfreezeBalance(_x35) {
            return _ref39.apply(this, arguments);
        }

        return unfreezeBalance;
    }();

    /**
     * Thawing has ended the Token freeze
     * @param {string} owner_address
     * @return {object} transaction
     * */


    TronWeb.prototype.unfreezeAsset = function () {
        var _ref40 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee22(owner_address) {
            var _ref41, data;

            return _regenerator2.default.wrap(function _callee22$(_context22) {
                while (1) {
                    switch (_context22.prev = _context22.next) {
                        case 0:
                            owner_address = (0, _help.address2HexString)(owner_address);
                            _context22.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/unfreezeasset', {
                                owner_address: owner_address
                            });

                        case 3:
                            _ref41 = _context22.sent;
                            data = _ref41.data;
                            return _context22.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context22.stop();
                    }
                }
            }, _callee22, this);
        }));

        function unfreezeAsset(_x36) {
            return _ref40.apply(this, arguments);
        }

        return unfreezeAsset;
    }();
    /**
     * Superdelegates represent rewards to balance, which can be withdrawn every 24 hours
     * @param {string} owner_address
     * @return {object} transaction
     */


    TronWeb.prototype.withdrawBalance = function () {
        var _ref42 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee23(owner_address) {
            var _ref43, data;

            return _regenerator2.default.wrap(function _callee23$(_context23) {
                while (1) {
                    switch (_context23.prev = _context23.next) {
                        case 0:
                            owner_address = (0, _help.address2HexString)(owner_address);
                            _context23.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/withdrawbalance', {
                                owner_address: owner_address
                            });

                        case 3:
                            _ref43 = _context23.sent;
                            data = _ref43.data;
                            return _context23.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context23.stop();
                    }
                }
            }, _callee23, this);
        }));

        function withdrawBalance(_x37) {
            return _ref42.apply(this, arguments);
        }

        return withdrawBalance;
    }();
    /**
     * Modify token information
     * @param {string} owner_address,{string} description,{string} url,{int} new_limit,{int} new_public_limit
     * @return {object} transaction
     * */


    TronWeb.prototype.updateAsset = function () {
        var _ref44 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee24(options) {
            var owner_address, description, url, new_limit, new_public_limit, _ref45, data;

            return _regenerator2.default.wrap(function _callee24$(_context24) {
                while (1) {
                    switch (_context24.prev = _context24.next) {
                        case 0:
                            owner_address = options.owner_address, description = options.description, url = options.url, new_limit = options.new_limit, new_public_limit = options.new_public_limit;

                            owner_address = (0, _help.address2HexString)(owner_address);
                            description = (0, _help.stringUtf8toHex)(description);
                            url = (0, _help.stringUtf8toHex)(url);
                            _context24.next = 6;
                            return _axios2.default.post(this.apiUrl + '/wallet/updateasset', {
                                owner_address: owner_address, description: description, url: url, new_limit: new_limit, new_public_limit: new_public_limit
                            });

                        case 6:
                            _ref45 = _context24.sent;
                            data = _ref45.data;
                            return _context24.abrupt('return', data);

                        case 9:
                        case 'end':
                            return _context24.stop();
                    }
                }
            }, _callee24, this);
        }));

        function updateAsset(_x38) {
            return _ref44.apply(this, arguments);
        }

        return updateAsset;
    }();
    /**
     * Query the node on which the API is connected
     * @param null
     * @return {object Array}
     * */


    TronWeb.prototype.listNodes = function () {
        var _ref46 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee25() {
            var _ref47, data;

            return _regenerator2.default.wrap(function _callee25$(_context25) {
                while (1) {
                    switch (_context25.prev = _context25.next) {
                        case 0:
                            _context25.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/listnodes');

                        case 2:
                            _ref47 = _context25.sent;
                            data = _ref47.data;
                            return _context25.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context25.stop();
                    }
                }
            }, _callee25, this);
        }));

        function listNodes() {
            return _ref46.apply(this, arguments);
        }

        return listNodes;
    }();
    /**
     * Check the token issued by the account
     * @param {string} address
     * @return {object}
     * */


    TronWeb.prototype.getAssetIssueByAccount = function () {
        var _ref48 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee26(address) {
            var _ref49, data;

            return _regenerator2.default.wrap(function _callee26$(_context26) {
                while (1) {
                    switch (_context26.prev = _context26.next) {
                        case 0:
                            address = (0, _help.address2HexString)(address);
                            _context26.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/getassetissuebyaccount', { address: address });

                        case 3:
                            _ref49 = _context26.sent;
                            data = _ref49.data;
                            return _context26.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context26.stop();
                    }
                }
            }, _callee26, this);
        }));

        function getAssetIssueByAccount(_x39) {
            return _ref48.apply(this, arguments);
        }

        return getAssetIssueByAccount;
    }();
    /**
     * Query bandwidth information
     * @param {string} address
     * @return {object}
     * */


    TronWeb.prototype.getAccountNet = function () {
        var _ref50 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee27(address) {
            var _ref51, data;

            return _regenerator2.default.wrap(function _callee27$(_context27) {
                while (1) {
                    switch (_context27.prev = _context27.next) {
                        case 0:
                            address = (0, _help.address2HexString)(address);
                            _context27.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/getaccountnet', { address: address });

                        case 3:
                            _ref51 = _context27.sent;
                            data = _ref51.data;
                            return _context27.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context27.stop();
                    }
                }
            }, _callee27, this);
        }));

        function getAccountNet(_x40) {
            return _ref50.apply(this, arguments);
        }

        return getAccountNet;
    }();
    /**
     * Query token by name
     * @param {string} value
     * @return {object}
     * */


    TronWeb.prototype.getAssetIssueByName = function () {
        var _ref52 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee28(value) {
            var _ref53, data;

            return _regenerator2.default.wrap(function _callee28$(_context28) {
                while (1) {
                    switch (_context28.prev = _context28.next) {
                        case 0:
                            value = (0, _help.stringUtf8toHex)(value);
                            _context28.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/getassetissuebyname', { value: value });

                        case 3:
                            _ref53 = _context28.sent;
                            data = _ref53.data;
                            return _context28.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context28.stop();
                    }
                }
            }, _callee28, this);
        }));

        function getAssetIssueByName(_x41) {
            return _ref52.apply(this, arguments);
        }

        return getAssetIssueByName;
    }();

    /**
     * Query blocks by scope
     * @param {int} startNum,{int} endNum
     * @return {object}
     * */


    TronWeb.prototype.getBlockByLimitNext = function () {
        var _ref54 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee29(startNum, endNum) {
            var _ref55, data;

            return _regenerator2.default.wrap(function _callee29$(_context29) {
                while (1) {
                    switch (_context29.prev = _context29.next) {
                        case 0:
                            _context29.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getblockbylimitnext', { startNum: startNum, endNum: endNum });

                        case 2:
                            _ref55 = _context29.sent;
                            data = _ref55.data;
                            return _context29.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context29.stop();
                    }
                }
            }, _callee29, this);
        }));

        function getBlockByLimitNext(_x42, _x43) {
            return _ref54.apply(this, arguments);
        }

        return getBlockByLimitNext;
    }();

    /**
     * Query the latest blocks
     * @param {int} num
     * @return {object}
     * */


    TronWeb.prototype.getBlockByLatestNum = function () {
        var _ref56 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee30(num) {
            var _ref57, data;

            return _regenerator2.default.wrap(function _callee30$(_context30) {
                while (1) {
                    switch (_context30.prev = _context30.next) {
                        case 0:
                            _context30.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getblockbylatestnum', { num: num });

                        case 2:
                            _ref57 = _context30.sent;
                            data = _ref57.data;
                            return _context30.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context30.stop();
                    }
                }
            }, _callee30, this);
        }));

        function getBlockByLatestNum(_x44) {
            return _ref56.apply(this, arguments);
        }

        return getBlockByLatestNum;
    }();

    /**
     * query all withnesses list
     * @param null
     * @returns {Array}
     * */


    TronWeb.prototype.listWitNesses = function () {
        var _ref58 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee31() {
            var _ref59, data;

            return _regenerator2.default.wrap(function _callee31$(_context31) {
                while (1) {
                    switch (_context31.prev = _context31.next) {
                        case 0:
                            _context31.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/listwitnesses');

                        case 2:
                            _ref59 = _context31.sent;
                            data = _ref59.data;
                            return _context31.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context31.stop();
                    }
                }
            }, _callee31, this);
        }));

        function listWitNesses() {
            return _ref58.apply(this, arguments);
        }

        return listWitNesses;
    }();
    /**
     * query all token list
     * @returns {Array}
     * */


    TronWeb.prototype.getAssetIssueList = function () {
        var _ref60 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee32() {
            var _ref61, data;

            return _regenerator2.default.wrap(function _callee32$(_context32) {
                while (1) {
                    switch (_context32.prev = _context32.next) {
                        case 0:
                            _context32.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getassetissuelist');

                        case 2:
                            _ref61 = _context32.sent;
                            data = _ref61.data;
                            return _context32.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context32.stop();
                    }
                }
            }, _callee32, this);
        }));

        function getAssetIssueList() {
            return _ref60.apply(this, arguments);
        }

        return getAssetIssueList;
    }();
    /**
     * query token list by page
     * @param {int} offset {int} limit
     * @returns {Array} 
     * */


    TronWeb.prototype.getPaginateDassetIssueList = function () {
        var _ref62 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee33(offset, limit) {
            var _ref63, data;

            return _regenerator2.default.wrap(function _callee33$(_context33) {
                while (1) {
                    switch (_context33.prev = _context33.next) {
                        case 0:
                            _context33.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getpaginatedassetissuelist', { offset: offset, limit: limit });

                        case 2:
                            _ref63 = _context33.sent;
                            data = _ref63.data;
                            return _context33.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context33.stop();
                    }
                }
            }, _callee33, this);
        }));

        function getPaginateDassetIssueList(_x45, _x46) {
            return _ref62.apply(this, arguments);
        }

        return getPaginateDassetIssueList;
    }();

    /**
     * Get the time for the next count
     * @param null
     * @returns {object} {num:time stamp}
     * */


    TronWeb.prototype.getNextMainteNanceTime = function () {
        var _ref64 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee34() {
            var _ref65, data;

            return _regenerator2.default.wrap(function _callee34$(_context34) {
                while (1) {
                    switch (_context34.prev = _context34.next) {
                        case 0:
                            _context34.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/getnextmaintenancetime');

                        case 2:
                            _ref65 = _context34.sent;
                            data = _ref65.data;
                            return _context34.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context34.stop();
                    }
                }
            }, _callee34, this);
        }));

        function getNextMainteNanceTime() {
            return _ref64.apply(this, arguments);
        }

        return getNextMainteNanceTime;
    }();

    /**
     * Quick transfer
     * @param {string}privateKey,{string} toAddress,{int} amount
     * @return {object}
     * */


    TronWeb.prototype.easyTransferByPrivate = function () {
        var _ref66 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee35(privateKey, toAddress, amount) {
            var _ref67, data;

            return _regenerator2.default.wrap(function _callee35$(_context35) {
                while (1) {
                    switch (_context35.prev = _context35.next) {
                        case 0:
                            privateKey = (0, _help.stringUtf8toHex)(privateKey);
                            toAddress = (0, _help.address2HexString)(toAddress);
                            _context35.next = 4;
                            return _axios2.default.post(this.apiUrl + '/wallet/easytransferbyprivate', {
                                privateKey: privateKey, toAddress: toAddress, amount: amount
                            });

                        case 4:
                            _ref67 = _context35.sent;
                            data = _ref67.data;
                            return _context35.abrupt('return', data);

                        case 7:
                        case 'end':
                            return _context35.stop();
                    }
                }
            }, _callee35, this);
        }));

        function easyTransferByPrivate(_x47, _x48, _x49) {
            return _ref66.apply(this, arguments);
        }

        return easyTransferByPrivate;
    }();
    /**
     * Generate private keys and addresses online
     * @param null
     * @return {object}
     * */


    TronWeb.prototype.generateAddressOnLine = function () {
        var _ref68 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee36() {
            var _ref69, data;

            return _regenerator2.default.wrap(function _callee36$(_context36) {
                while (1) {
                    switch (_context36.prev = _context36.next) {
                        case 0:
                            _context36.next = 2;
                            return _axios2.default.post(this.apiUrl + '/wallet/generateaddress');

                        case 2:
                            _ref69 = _context36.sent;
                            data = _ref69.data;
                            return _context36.abrupt('return', data);

                        case 5:
                        case 'end':
                            return _context36.stop();
                    }
                }
            }, _callee36, this);
        }));

        function generateAddressOnLine() {
            return _ref68.apply(this, arguments);
        }

        return generateAddressOnLine;
    }();
    /**
     * Generate private keys and addresses locally
     * @param null
     * @return {object}
     * */


    TronWeb.prototype.generateAddressOnClient = function () {
        var _ref70 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee37() {
            var data;
            return _regenerator2.default.wrap(function _callee37$(_context37) {
                while (1) {
                    switch (_context37.prev = _context37.next) {
                        case 0:
                            _context37.next = 2;
                            return (0, _account.generateAccount)();

                        case 2:
                            data = _context37.sent;
                            return _context37.abrupt('return', data);

                        case 4:
                        case 'end':
                            return _context37.stop();
                    }
                }
            }, _callee37, this);
        }));

        function generateAddressOnClient() {
            return _ref70.apply(this, arguments);
        }

        return generateAddressOnClient;
    }();

    /**
     * Check that the address is correct
     * @param {string hexString} address
     * @return {object}
     * */


    TronWeb.prototype.validateAddress = function () {
        var _ref71 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee38(address) {
            var _ref72, data;

            return _regenerator2.default.wrap(function _callee38$(_context38) {
                while (1) {
                    switch (_context38.prev = _context38.next) {
                        case 0:
                            address = (0, _help.address2HexString)(address);
                            _context38.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/validateaddress', { address: address });

                        case 3:
                            _ref72 = _context38.sent;
                            data = _ref72.data;
                            return _context38.abrupt('return', data);

                        case 6:
                        case 'end':
                            return _context38.stop();
                    }
                }
            }, _callee38, this);
        }));

        function validateAddress(_x50) {
            return _ref71.apply(this, arguments);
        }

        return validateAddress;
    }();
    /**
     * Deploy contract
     * @param
     * {string} abi,
     * {string} bytecode,
     * {int} bandwidth_limit 字节数,
     * {int} cpu_limit 微秒,
     * {int} storage_limit 字节数
     * {int} drop_limit 最大消耗的Drop (1trx = 1000000drop)
     * {int} call_value 本次调用网合约转账的Drop (1trx = 1000000drop)
     * {string hexString} owner_address 发起部署合约的账户地址
     * @return {object transction}
     * */


    TronWeb.prototype.deployContract = function () {
        var _ref73 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee39(options) {
            var abi, bytecode, fee_limit, call_value, owner_address, consume_user_resource_percent, _ref74, data;

            return _regenerator2.default.wrap(function _callee39$(_context39) {
                while (1) {
                    switch (_context39.prev = _context39.next) {
                        case 0:
                            abi = options.abi, bytecode = options.bytecode, fee_limit = options.fee_limit, call_value = options.call_value, owner_address = options.owner_address, consume_user_resource_percent = options.consume_user_resource_percent;

                            owner_address = (0, _help.address2HexString)(owner_address);
                            _context39.next = 4;
                            return _axios2.default.post(this.apiUrl + '/wallet/deploycontract', {
                                abi: abi,
                                bytecode: bytecode,
                                fee_limit: fee_limit,
                                call_value: call_value,
                                owner_address: owner_address,
                                consume_user_resource_percent: consume_user_resource_percent
                            });

                        case 4:
                            _ref74 = _context39.sent;
                            data = _ref74.data;
                            return _context39.abrupt('return', data);

                        case 7:
                        case 'end':
                            return _context39.stop();
                    }
                }
            }, _callee39, this);
        }));

        function deployContract(_x51) {
            return _ref73.apply(this, arguments);
        }

        return deployContract;
    }();

    TronWeb.prototype.getContract = function () {
        var _ref75 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee40(contractAddress) {
            var _ref76, data;

            return _regenerator2.default.wrap(function _callee40$(_context40) {
                while (1) {
                    switch (_context40.prev = _context40.next) {
                        case 0:
                            _context40.prev = 0;
                            _context40.next = 3;
                            return _axios2.default.post(this.apiUrl + '/wallet/getcontract', {
                                value: (0, _help.address2HexString)(contractAddress)
                            });

                        case 3:
                            _ref76 = _context40.sent;
                            data = _ref76.data;
                            return _context40.abrupt('return', data);

                        case 8:
                            _context40.prev = 8;
                            _context40.t0 = _context40['catch'](0);

                            console.warn(_context40.t0.toString());

                        case 11:
                        case 'end':
                            return _context40.stop();
                    }
                }
            }, _callee40, this, [[0, 8]]);
        }));

        function getContract(_x52) {
            return _ref75.apply(this, arguments);
        }

        return getContract;
    }();

    TronWeb.prototype.triggerSmartContract = function () {
        var _ref77 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee41(options) {
            var coder, contract_address, function_selector, parameter, fee_limit, call_value, owner_address, paramTypes, paramValues, _ref78, data;

            return _regenerator2.default.wrap(function _callee41$(_context41) {
                while (1) {
                    switch (_context41.prev = _context41.next) {
                        case 0:
                            coder = new _ethers.utils.AbiCoder();
                            contract_address = options.contract_address, function_selector = options.function_selector, parameter = options.parameter, fee_limit = options.fee_limit, call_value = options.call_value, owner_address = options.owner_address;

                            contract_address = (0, _help.address2HexString)(contract_address);
                            function_selector = function_selector.replace(/\s*/g, '');
                            if (parameter || parameter.length) {
                                paramTypes = parameter[0];
                                paramValues = parameter[1];

                                paramTypes.forEach(function (itemType, index) {
                                    if (itemType == 'address') {
                                        paramValues[index] = (0, _help.address2HexString)(paramValues[index]).replace(/^(41)/, '0x');
                                    }
                                });
                                parameter = coder.encode(paramTypes, paramValues).replace(/^(0x)/, '');
                            }

                            owner_address = (0, _help.address2HexString)(owner_address);

                            _context41.next = 8;
                            return _axios2.default.post(this.apiUrl + '/wallet/triggersmartcontract', {
                                contract_address: contract_address,
                                function_selector: function_selector,
                                parameter: parameter,
                                fee_limit: fee_limit,
                                call_value: call_value,
                                owner_address: owner_address
                            });

                        case 8:
                            _ref78 = _context41.sent;
                            data = _ref78.data;
                            return _context41.abrupt('return', data);

                        case 11:
                        case 'end':
                            return _context41.stop();
                    }
                }
            }, _callee41, this);
        }));

        function triggerSmartContract(_x53) {
            return _ref77.apply(this, arguments);
        }

        return triggerSmartContract;
    }();

    TronWeb.prototype.getEventResult = function () {
        var _ref79 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee42(_ref80) {
            var contractAddress = _ref80.contractAddress,
                eventName = _ref80.eventName,
                blockNum = _ref80.blockNum,
                transactionId = _ref80.transactionId;
            var requestUrl, result;
            return _regenerator2.default.wrap(function _callee42$(_context42) {
                while (1) {
                    switch (_context42.prev = _context42.next) {
                        case 0:
                            requestUrl = this.tronInfuraUrl + '/event/contract';

                            if (contractAddress) {
                                requestUrl += '/' + contractAddress;
                            }
                            if (eventName) {
                                requestUrl += '/' + eventName;
                            }
                            if (blockNum) {
                                requestUrl += '/' + blockNum;
                            }
                            if (transactionId) {
                                requestUrl = this.tronInfuraUrl + '/event/transaction/' + transactionId;
                            }
                            _context42.next = 7;
                            return _axios2.default.get(requestUrl);

                        case 7:
                            result = _context42.sent;
                            return _context42.abrupt('return', result);

                        case 9:
                        case 'end':
                            return _context42.stop();
                    }
                }
            }, _callee42, this);
        }));

        function getEventResult(_x54) {
            return _ref79.apply(this, arguments);
        }

        return getEventResult;
    }();

    TronWeb.prototype.contract = function contract(abiArray) {
        var _this = this;
        return {
            abi: abiArray,
            at: function () {
                var _ref81 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee43(address) {
                    var _ref82, contract_address, origin_address, abiObj, contractInstance;

                    return _regenerator2.default.wrap(function _callee43$(_context43) {
                        while (1) {
                            switch (_context43.prev = _context43.next) {
                                case 0:
                                    if (!address) {
                                        _context43.next = 9;
                                        break;
                                    }

                                    _context43.next = 3;
                                    return _this.getContract(address);

                                case 3:
                                    _ref82 = _context43.sent;
                                    contract_address = _ref82.contract_address;
                                    origin_address = _ref82.origin_address;
                                    abiObj = _private.parseAbi.call(_this, abiArray, { contract_address: contract_address, owner_address: _this.defaultAccount });
                                    contractInstance = Object.assign({ address: contract_address }, abiObj);
                                    return _context43.abrupt('return', contractInstance);

                                case 9:
                                    return _context43.abrupt('return', new Object());

                                case 10:
                                case 'end':
                                    return _context43.stop();
                            }
                        }
                    }, _callee43, this);
                }));

                function at(_x55) {
                    return _ref81.apply(this, arguments);
                }

                return at;
            }(),
            new: function () {
                var _ref83 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee44(options, pk) {
                    var _self, bytecode, owner_address, fee_limit, call_value, consume_user_resource_percent, abi, res, returnRes, signTransaction, result, contractInstance;

                    return _regenerator2.default.wrap(function _callee44$(_context44) {
                        while (1) {
                            switch (_context44.prev = _context44.next) {
                                case 0:
                                    _self = this;
                                    bytecode = options.data;
                                    owner_address = options.from;
                                    fee_limit = options.fee_limit;
                                    call_value = options.call_value;
                                    consume_user_resource_percent = options.consume_user_resource_percent;
                                    abi = JSON.stringify(abiArray);
                                    _context44.next = 9;
                                    return _this.deployContract({
                                        abi: abi,
                                        bytecode: bytecode,
                                        fee_limit: fee_limit,
                                        call_value: call_value,
                                        owner_address: owner_address,
                                        consume_user_resource_percent: consume_user_resource_percent
                                    });

                                case 9:
                                    res = _context44.sent;
                                    returnRes = { transactionHash: res.txID, address: res.contract_address };

                                    if (!(Object.keys(res).indexOf('txID') > -1)) {
                                        _context44.next = 19;
                                        break;
                                    }

                                    _context44.next = 14;
                                    return _this.signTransaction(res, pk);

                                case 14:
                                    signTransaction = _context44.sent;
                                    _context44.next = 17;
                                    return _this.sendRawTransaction(signTransaction);

                                case 17:
                                    result = _context44.sent;

                                    if (result) {
                                        returnRes.broadCast = true;
                                    }

                                case 19:
                                    _context44.next = 21;
                                    return _self.at(returnRes.address);

                                case 21:
                                    contractInstance = _context44.sent;
                                    return _context44.abrupt('return', Object.assign(contractInstance, returnRes));

                                case 23:
                                case 'end':
                                    return _context44.stop();
                            }
                        }
                    }, _callee44, this);
                }));

                function _new(_x56, _x57) {
                    return _ref83.apply(this, arguments);
                }

                return _new;
            }()
        };
    };

    TronWeb.prototype.toBigNumber = function toBigNumber(str) {
        return (0, _bignumber.BigNumber)(str);
    };

    TronWeb.prototype.sendTransactionByWallet = function sendTransactionByWallet(options, callback) {
        var _this2 = this;

        var to = options.to,
            amount = options.amount,
            transaction = options.transaction;

        if (document) {
            var oTronWallet = document.getElementById("oTronWallet");
            var oWalletTransationResult = document.getElementById('transaction_wallet_result');
            if (oTronWallet) {
                console.log('Chrome extension is installed!');
                var open_wallet = document.createEvent('Event');
                open_wallet.initEvent('open_wallet', true, true);
                oTronWallet.innerText = JSON.stringify({
                    to: to,
                    amount: amount || 0,
                    data: transaction
                });
                oTronWallet.dispatchEvent(open_wallet);
                oWalletTransationResult.value = '';
                var timer = setInterval(_asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee45() {
                    var walletResult, transactionid, validResult;
                    return _regenerator2.default.wrap(function _callee45$(_context45) {
                        while (1) {
                            switch (_context45.prev = _context45.next) {
                                case 0:
                                    if (!oWalletTransationResult.value) {
                                        _context45.next = 12;
                                        break;
                                    }

                                    walletResult = JSON.parse(oWalletTransationResult.value);

                                    if (walletResult.success) {
                                        _context45.next = 6;
                                        break;
                                    }

                                    callback && callback('Failed');
                                    _context45.next = 11;
                                    break;

                                case 6:
                                    transactionid = walletResult.transaction.txID;
                                    _context45.next = 9;
                                    return _this2.getTransaction(transactionid);

                                case 9:
                                    validResult = _context45.sent;

                                    if (Object.keys(validResult).length == 0) {
                                        callback && callback('Failed');
                                    } else {
                                        callback && callback('success');
                                    }

                                case 11:
                                    clearInterval(timer);

                                case 12:
                                case 'end':
                                    return _context45.stop();
                            }
                        }
                    }, _callee45, _this2);
                })), 500);
            } else {
                var returnWarn = 'Chrome extention is not installed yet...';
                console.log(returnWarn);
                return returnWarn;
            }
        }
    };

    TronWeb.prototype.trxToSun = function trxToSun(trxCount) {
        if (trxCount >= 0) {
            return trxCount * Math.pow(10, 6);
        }
        return 0;
    };

    TronWeb.prototype.sunToTrx = function sunToTrx(sunCount) {
        if (sunCount >= 0) {
            return sunCount / Math.pow(10, 6);
        }
        return 0;
    };

    return TronWeb;
}();

exports.default = TronWeb;
module.exports = exports['default'];